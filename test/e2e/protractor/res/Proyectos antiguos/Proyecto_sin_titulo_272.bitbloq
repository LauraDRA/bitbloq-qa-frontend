{"code":"/***   Included libraries  ***/\n#include <Servo.h> // servo desde biblioteca\n#include <SoftwareSerial.h> //puerto serie desde biblioteca\n#include <BitbloqSoftwareSerial.h>//puerto serie desde biblioteca\n\n\n/***   Global variables and function definition  ***/\n\nServo miServo; //variable servo\nconst int pinPotenciometro = A5; // pin del sensor analogico, con un potenciometro\nconst int pinIR = 2; // pin del sensor digital, con un sensor IR\nbqSoftwareSerial puerto_serie_0(0, 1, 9600); //variable puerto serie\nfloat valorPotenciometro = 0; //declaramos una variable para leer el valor del potenciómetro\nfloat valorAngulo = 0; //declaramos una variable para dar valor al angulo del servo a partir del valorPotenciometro\n\n\nvolatile int numeroNegros = 0; //variable dentro de la interrupción \n//función dentro de la interrupción que mide el número de negros que pasan mediante un contador\nvoid medirAngulo() {\n    numeroNegros++;\n}\n\nunsigned long previoMillis = 0; //guarda el tiempo previo a la medición del intervalo\nconst int intervalo = 10000; //tomamos un intervalo de 10 s\nconst float arcoNegroBlanco = 3.141592 / 12; //estos son los radiames correspondientes a cada par negro-blanco\nfloat velocidadMedia = 0; //se usará para calcular la velocidad media de esos 10 segundos\n\n/***   Setup  ***/\nvoid setup() {\n\n    miServo.attach(13); //asocioamos el servo al pin 13\n    miServo.write(90); //paramos el servo\n\n    pinMode(pinPotenciometro, INPUT); //declaramos el pin del potenciómetro como entrada\n\n    pinMode(pinIR, INPUT); //declaramos el pin del sensor IR como entrada\n\n    Serial.begin(9600); //inicializa la comunicación puerto serie\n\n    attachInterrupt(0, medirAngulo, FALLING); //definimos la interrupcion 0 a través del IR al pasar de blanco a negro\n}\n\n/***   Loop  ***/\nvoid loop() {\n\n    /***  definimos la velocidad del disco mediante el giro del potenciómetro  ***/\n\n    valorPotenciometro = analogRead(pinPotenciometro);\n    valorAngulo = map(valorPotenciometro, 0, 1023, 90, 179); //giramos únicamente en una dirección\n    miServo.write(valorAngulo);\n    delay(10);\n\n    /***   medimos el tiempo del intervalo y calculamos la velocidad media    ***/\n\n    unsigned long actualMillis = millis(); //creamos la variable que guardará el tiempo de funcionamiento\n    //hasta que no pase un tiempo igual  superior a intervalo no hace nada\n    if (actualMillis - previoMillis >= intervalo) { //al transcurrir ese tiempo \n\n        previoMillis = actualMillis; //guardamos ese tiempo como inicial\n        velocidadMedia = (numeroNegros * arcoNegroBlanco / intervalo); // calculamos la velocidad media a través del contador de interrupciones, valor del arco e intervalo\n        Serial.print(\"Velocidad Media en rad/s =\"); //lo mostramos en pantalla\n        Serial.println(velocidadMedia);\n\n\n    }\n}","codeProject":true,"description":"","videoUrl":"","name":"Proyecto sin título","corbelId":"55acae7ae4b00f538d041f75:206c3a7e-a2e1-4bc3-9ac5-da2315a0c5ea","image":"default","userTags":[],"hardwareTags":["bq ZUM"],"hardware":{"board":"bq ZUM","connections":[],"components":[]},"defaultTheme":"infotab_option_colorTheme","timesDownload":0,"timesAdded":0,"timesViewed":0}